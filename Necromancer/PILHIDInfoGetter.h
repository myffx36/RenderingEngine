#pragma once

#include "CommonUtility.h"

namespace Necromancer{
	enum KeyInfo{
		NMK_0,
		NMK_1,
		NMK_2,
		NMK_3,
		NMK_4,
		NMK_5,
		NMK_6,
		NMK_7,
		NMK_8,
		NMK_9,
		NMK_A,
		NMK_ABNT_C1,
		NMK_ABNT_C2,
		NMK_ADD,
		NMK_APOSTROPHE,
		NMK_APPS,
		NMK_AT,
		NMK_AX,
		NMK_B,
		NMK_BACK,
		NMK_BACKSLASH,
		NMK_C,
		NMK_CALCULATOR,
		NMK_CAPITAL,
		NMK_COLON,
		NMK_COMMA,
		NMK_CONVERT,
		NMK_D,
		NMK_DECIMAL,
		NMK_DELETE,
		NMK_DIVIDE,
		NMK_DOWN,
		NMK_E,
		NMK_END,
		NMK_EQUALS,
		NMK_ESCAPE,
		NMK_F,
		NMK_F1,
		NMK_F2,
		NMK_F3,
		NMK_F4,
		NMK_F5,
		NMK_F6,
		NMK_F7,
		NMK_F8,
		NMK_F9,
		NMK_F10,
		NMK_F11,
		NMK_F12,
		NMK_F13,
		NMK_F14,
		NMK_F15,
		NMK_G,
		NMK_GRAVE,
		NMK_H,
		NMK_HOME,
		NMK_I,
		NMK_INSERT,
		NMK_J,
		NMK_K,
		NMK_KANA,
		NMK_KANJI,
		NMK_L,
		NMK_LBRACKET,
		NMK_LCONTROL,
		NMK_LEFT,
		NMK_LMENU,
		NMK_LSHIFT,
		NMK_LWIN,
		NMK_M,
		NMK_MAIL,
		NMK_MEDIASELECT,
		NMK_MEDIASTOP,
		NMK_MINUS,
		NMK_MULTIPLY,
		NMK_MUTE,
		NMK_MYCOMPUTER,
		NMK_N,
		NMK_NEXT,
		NMK_NEXTTRACK,
		NMK_NOCONVERT,
		NMK_NUMLOCK,
		NMK_NUMPAD0,
		NMK_NUMPAD1,
		NMK_NUMPAD2,
		NMK_NUMPAD3,
		NMK_NUMPAD4,
		NMK_NUMPAD5,
		NMK_NUMPAD6,
		NMK_NUMPAD7,
		NMK_NUMPAD8,
		NMK_NUMPAD9,
		NMK_NUMPADCOMMA,
		NMK_NUMPADENTER,
		NMK_NUMPADEQUALS,
		NMK_O,
		NMK_OEM_102,
		NMK_P,
		NMK_PAUSE,
		NMK_PERIOD,
		NMK_PLAYPAUSE,
		NMK_POWER,
		NMK_PREVTRACK,
		NMK_PRIOR,
		NMK_Q,
		NMK_R,
		NMK_RBRACKET,
		NMK_RCONTROL,
		NMK_RETURN,
		NMK_RIGHT,
		NMK_RMENU,
		NMK_RSHIFT,
		NMK_RWIN,
		NMK_S,
		NMK_SCROLL,
		NMK_SEMICOLON,
		NMK_SLASH,
		NMK_SLEEP,
		NMK_SPACE,
		NMK_STOP,
		NMK_SUBTRACT,
		NMK_SYSRQ,
		NMK_T,
		NMK_TAB,
		NMK_U,
		NMK_UNDERLINE,
		NMK_UNLABELED,
		NMK_UP,
		NMK_V,
		NMK_VOLUMEDOWN,
		NMK_VOLUMEUP,
		NMK_W,
		NMK_WAKE,
		NMK_WEBBACK,
		NMK_WEBFAVORITES,
		NMK_WEBFORWARD,
		NMK_WEBHOME,
		NMK_WEBREFRESH,
		NMK_WEBSEARCH,
		NMK_WEBSTOP,
		NMK_X,
		NMK_Y,
		NMK_YEN,
		NMK_Z,
		NMK_INVALIDE

	};
	enum KeyboardEventType{
		KEY_DOWN,
		KEY_UP
	};
	struct KeyboardEvent{
		KeyboardEventType type;
		KeyInfo value;
	};
	enum MouseEvenetType{
		LEFT_DOWN,
		LEFT_UP,
		RIGHT_DOWN,
		RIGHT_UP,
		LEFT_CLICK,
		RIGHT_CLICK,
		LEFT_DBCLICK,
		RIGHT_DBCLICK,
		X_MOVE,
		Y_MOVE,
		Z_MOVE,
		MID_DOWN,
		MID_UP,
		MID_CLICK,
		MID_DBCLICK
	};
	struct MouseEvent{
		MouseEvenetType type;
		float x, y;
		float offset;
	};

	class PILHIDInfoGetter{
	public:
		virtual ~PILHIDInfoGetter();

		virtual void get_keyboard_event(KeyboardEvent*, U32& num) = 0;
		virtual void get_mouse_event(MouseEvent*, U32& num) = 0;
	private:
	};
}

